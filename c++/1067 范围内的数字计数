给定一个在 0 到 9 之间的整数 d，和两个正整数 low 和 high 分别作为上下界。

返回 d 在 low 和 high 之间的整数中出现的次数，包括边界 low 和 high。

示例 1：
输入：d = 1, low = 1, high = 13
输出：6
解释： 
数字 d=1 在 1,10,11,12,13 中出现 6 次。
注意 d=1 在数字 11 中出现两次。

示例 2：
输入：d = 3, low = 100, high = 250
输出：35
解释：
数字 d=3 在 103,113,123,130,131,...,238,239,243 出现 35 次。
 
提示：
0 <= d <= 9
1 <= low <= high <= 2×10^8

思路：这道题我们用递归的方式，递归函数为recursiveCount(N,d)，将N当中出现d的次数分为个位数中出现的次数，加上非个位数出现的次数。
个位数出现的次数为N/10，非个位数中出现的次数为recursiveCount(N/10,d)*10，可以理解为N/10中每一个数都可以＋后缀0-9成为N中的一个数字。
当然还要考虑最后一位的大小，从而加减一个偏差，详见代码注释

class Soulution{
      int recursiveCount(){
        //退出条件
        if(N<=9){
            return d==0 ? 0 : (d<=N);
        }
        int ret=0;
        //个位数字d出现的次数，不包含最后一次，e.g. N=797，这里只计算1-789之间个位数字出现d的次数
        ret += (d==0 ? (N/10-1) : N/10);
        //判断最后一次个位数字是否包含d，e.g.N=797，判断790-797之间个位数字是否出现d
        if(N % 10 >= d){
            ++ret;
        }
        //除了个位数字以外其他位数d出现的个数，e.g.N=797，我们计算了1-799之间非个位数字出现d的次数
        ret += recursiveCount(N/10,d)*10;
        //前面默认最后一位到9，因此我们要减去最后一位不到9的情况，e.g.N=797，我们计算798-799两数非个位数字出现d的次数
        string nstr=to_string(N/10);
        ret -=std::count(nstr.begin(),nstr.end(),d+'0')*(9-N%10);
        return ret;
      }
public:
    int digitsCount(int d,int low,int high){
        return recursiveCount(high,d)-recursiveCount(low-1,d);
    }
}
