
Given two numbers arr1 and arr2 in base -2, return the result of adding them together.

Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, arr = [1,1,0,1] 
represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.

Return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.

给出基数为 -2 的两个数 arr1 和 arr2，返回两数相加的结果。

数字以 数组形式 给出：数组由若干 0 和 1 组成，按最高有效位到最低有效位的顺序排列。例如，arr = [1,1,0,1] 表示数字 (-2)^3 + (-2)^2 + (-2)^0 = -3。数组形式中的数字 arr 
也同样不含前导零：即 arr == [0] 或 arr[0] == 1。

返回相同表示形式的 arr1 和 arr2 相加的结果。两数的表示形式为：不含前导零、由若干 0 和 1 组成的数组。

Example 1:

Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
Output: [1,0,0,0,0]
Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.

Example 2:

Input: arr1 = [0], arr2 = [0]
Output: [0]

Example 3:

Input: arr1 = [0], arr2 = [1]
Output: [1]

这道题主要考察bit manipulation，也就是位数的转换。
与base 2相比，只需要每次carry变换符号即可，因为相邻位上-2^n与-2^(n-1)的符号相反。
但要注意，我们一定要使用current & 1 以及 -(current>>1) 来计算当前位的值以及carry的值。
如果使用%和除法的话，对于负数将得到错误的结果。
Time：O(M+N)
Space：O(1)

class Solution {
public:
    vector<int> addNegabinary(vector<int>& arr1, vector<int>& arr2) {
        vector<int> rets;
        int carry=0;
        int i=arr1.size()-1;
        int j=arr2.size()-1;
        while(i>=0 || j>=0 || carry!=0){
            int current=carry;
            if(i>=0){
                current +=arr1[i];
            }
            if(j>=0){
                current +=arr2[j];
            }
            //当current =-1 时，使用carry %2将得到-1
            rets.push_back(current & 1 );
            carry =-(current >> 1);
            --i;
            --j;
        }
        while(rets.size()>1 & rets.back()==0){
            rets.pop_back();
        }
        reverse(rets.begin(),rets.end());
        return rets;
    }
};
