给出长度相同的两个字符串：A 和 B，其中 A[i] 和 B[i] 是一组等价字符。
举个例子，如果 A = "abc" 且 B = "cde"，那么就有 'a' == 'c', 'b' == 'd', 'c' == 'e'。

等价字符遵循任何等价关系的一般规则：
自反性：'a' == 'a'
对称性：'a' == 'b' 则必定有 'b' == 'a'
传递性：'a' == 'b' 且 'b' == 'c' 就表明 'a' == 'c'
例如，A 和 B 的等价信息和之前的例子一样，
	那么 S = "eed", "acd" 或 "aab"，这三个字符串都是等价的，
	而 "aab" 是 S 的按字典序最小的等价字符串
  
示例 1：
输入：A = "parker", B = "morris", S = "parser"
输出："makkek"
解释：根据 A 和 B 中的等价信息，
我们可以将这些字符分为 [m,p], [a,o], [k,r,s], [e,i] 共 4 组。
每组中的字符都是等价的，并按字典序排列。所以答案是 "makkek"。

示例 2：
输入：A = "hello", B = "world", S = "hold"
输出："hdld"
解释：根据 A 和 B 中的等价信息，
我们可以将这些字符分为 [h,w], [d,e,o], [l,r] 共 3 组。
所以只有 S 中的第二个字符 'o' 变成 'd'，最后答案为 "hdld"。

示例 3：
输入：A = "leetcode", B = "programs", S = "sourcecode"
输出："aauaaaaada"
解释：我们可以把 A 和 B 中的等价字符分为 
[a,o,e,r,s,c], [l,p], [g,t] 和 [d,m] 共 4 组，
因此 S 中除了 'u' 和 'd' 之外的所有字母都转化成了 'a'，最后答案为 "aauaaaaada"。
 
提示：
字符串 A，B 和 S 仅有从 'a' 到 'z' 的小写英文字母组成。
字符串 A，B 和 S 的长度在 1 到 1000 之间。
字符串 A 和 B 长度相同。

解题思路：这道题很多网上解答是用Union find，实际上并不是最好的方法。
Union find比较适合union与find操作交错的情况，比如Number of Islands II。
但是在这里的话，如果使用Union find，需要先进行一系列union操作，然后进行一系列find操作，时间复杂度是O((M+N)log*(M))
近似于O(M+N)，但是实际上直接使用DFS或者BFS遍历，也可以达到O(M+N)的时间复杂度：
1.首先遍历A和B，创建一个字母间关联的无向图mapping
2.遍历S，对于S中的每一个字母S，在无向图中进行一次DFS（BFS也可以），找寻关联字母中最小的字母，同时用一个unordered_set visited记录遍历到的点。
3.visited中的点都是与当前字母s关联的，因此对应的最小字母是一样的，用一个unordered_map memo来记录visited中的点与最小字母的对应关系，
  这样下次遍历到这些点，就不用再做dfs了，直接从memo中查到对应的最小字母即可。
假设A和B的长度是M，S的长是N，由于mapping中每一个字母和每一边遍历了一遍，这是一个O(M)的时间复杂度，创建mapping是O(M)的时间复杂度，遍历S的时间复杂度
为O(N)。所以总的时间复杂度是O(2M+N)也是近似于O(M+N)

//Time: O(M+N)，假设A和B的长度是M，S的长度是N
//Space： O(M)，即mapping的空间

class Solution{
	char dfs(unordered_map<char,vector<char>>& mapping,char input,unordered_set<char>& visited){
		if(visited.count(input)>0){
			return input;
		}
		visited.insert(input);
		char ret=input;
		for(const auto ch:mapping[input]){
			ret=min(ret,dfs(mapping,ch,visited));
		}
		return ret;
	}
public:
	string smallestEquivalentString(string A,string B,string S){
		unordered_map<char,vector<char>> mapping;
		for（int i=0;i<A.size();++i){
			mapping[A[i]].push_back(B[i]);
			mapping[B[i]].push_back(A[i]);
		}
		string ret;
		unordered_map<char,char> memo;
		for(const auto s: S){
			if(memo.count(s)>0){
				ret += memo[s];
				continue;
			}
			unordered_set<char> visited;
			const auto min_char=dfs(mapping,s,visited);
			for(const auto ch: visited){
				memo[ch]=min_char;
			}
			ret +=min_char;
		}
		return ret;
	}
}
