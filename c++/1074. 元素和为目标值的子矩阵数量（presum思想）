Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

Example 1:

Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.

Example 2:

Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.

Example 3:

Input: matrix = [[904]], target = 0
Output: 0

思路：我们可以依次得到在列空间[col1,col2]中，第0行到第row行的所有的数的和，用一个哈希表存下来，边可以查询满足题目要求的Submatrix。相当于又一个presum的思想。可参考leetcode 560题。
综上所述，这题通过二维的presum运用的可以得到解答。相关的题目还有leetcode 304 Range Sum Query 2D- Immutable。
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int res=0,m=matrix.size(),n=matrix[0].size();
        vector<vector<int>> presum(m,vector<int>(n+1,0));
        for(int i=0;i<m;i++){
            for(int j=1;j<n+1;j++){
                presum[i][j]+=presum[i][j-1]+matrix[i][j-1];
            }
        }
        unordered_map<int,int> counter;
        for(int col1=0;col1<n+1;col1++){
            for(int col2=col1+1;col2<n+1;col2++){
                counter={{0,1}};
                int cur=0;
                for(int row=0;row<m;row++){
                    cur +=presum[row][col2]-presum[row][col1];
                    res +=counter.find(cur-target)!=counter.end()?counter[cur-target]:0;
                    counter[cur]++;
                }
            }
        }
        return res;
    }
};
